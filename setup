#!/bin/bash

# relative to home
repo_path=repos/dotfiles

home_setup() {
    local cur=$pwd
    local home_links=(.bashrc .colors .tmux.conf .urxvt .vim .vimrc .Xresources .scripts .xbindkeysrc)
    
    echo "Creating home links"
    
    cd $HOME
    for f in ${home_links[@]}; do
        echo "Creating link for $f"
        ln -sn $HOME/${repo_path}/$f $f
    done
    
    cd $cur
}

config_setup() {
    local cur=$pwd
    cd $HOME/$repo_path/.config
    for f in *; do
        echo "Creating link for $f"
        ln -sn $HOME/$repo_path/.config/$f $HOME/.config/$f
    done

    cd $cur
}

systemd_setup() {
    if [[ "$EUID" -ne 0 ]]; then
        echo "Systemd setup needs to be run with sudo."
        exit 1
    fi
    local user=$(who -m | awk '{print $1}')
    local systemd_path=/etc/systemd/system
    if [[ ! -h ${systemd_path}/suspend@.service ]]; then
        echo "Creating systemd link"
        ln -s $HOME/${repo_path}/systemd/suspend@.service ${systemd_path}/suspend@.service
        echo "Enabling and starting service for ${user}"
        systemctl enable suspend@${user}.service
        systemctl start suspend@${user}.service
    else
        echo "Link already exists."
        exit 0
    fi
}

touchpad_setup() {
    if [[ "$EUID" -ne 0 ]]; then
        echo "Touchpad setup needs to be run with sudo."
        exit 1
    fi
    local xorg_path=/usr/share/X11/xorg.conf.d
    ln -s $HOME/${repo_path}/xorg.conf.d/30-touchpad.conf ${xorg_path}/30-touchpad.conf
}

packages_setup() {
    apt install \
        libanyevent-i3-perl \
        libanyevent-perl \
        libasync-interrupt-perl \
        libcommon-sense-perl \
        libev-perl \
        libev4 \
        libguard-perl \
        libjson-xs-perl \
        libtypes-serialiser-perl \
        libxcb-cursor0 \
        libxcb-xinerama0 \
        libinput-tools xserver-xorg-input-libinput \
        xdotool wmctrl \
        git \
        vim 
}

font_setup() {
    mkdir -p ~/.local/share/fonts
    cd ~/.local/share/fonts && curl -fLo "Iosevka Medium Nerd Font Complete Mono.ttf" https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/Iosevka/Medium/complete/Iosevka%20Medium%20Nerd%20Font%20Complete%20Mono.ttf
    cd ~/.local/share/fonts && curl -fLo "Iosevka Nerd Font Complete Mono.ttf" https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/Iosevka/Regular/complete/Iosevka%20Nerd%20Font%20Complete%20Mono.ttf
    ln -s ~/.local/share/fonts ~/.fonts
}

wifi_setup() {
    if [[ "$EUID" -ne 0 ]]; then
        echo "Wifi script setup needs to be run with sudo."
        exit 1
    fi
    cp $HOME/${repo_path}/.scripts/70-wifi-wired-exclusive /etc/NetworkManager/dispatcher.d/70-wifi-wired-exclusive
}

slack_taskbar_icon() {
    #TODO Script out

    #tmp_dir=$(mktemp -d -t slack-XXXXXXXXXX)
    #cd $tmp_dir

    #cp /usr/lib/slack/resources/app.asar.unpacked/dist/static/*.ico .

    #for image in *.ico; do echo $image; convert $image $(echo $image | awk -F. '{print $1".png"}'); done

    #for image in *.png; do echo $image; convert $image -fuzz 10% -fill "#d5c4a1" -opaque "#FFFFFF" ${image}; done

    #for image in *unread-*png; do echo $image; convert $image -fuzz 25% -fill "#458588" -opaque "#5dbcd2" $image; done

    #for image in *highlight-*png; do echo $image; convert $image -fuzz 25% -fill "#cc241d" -opaque "#e74487" $image; done

    #for ico in highlight rest unread; do convert slack-taskbar-${ico}-0.png slack-taskbar-${ico}-1.png slack-taskbar-${ico}-2.png slack-taskbar-${ico}-3.png slack-taskbar-${ico}.ico; done

    echo -e "Base64 the slack icon-2 pngs.\nExtract app.asar using:\n\tnpx asar extract /usr/lib/slack/resources/app.asar <destination>\nEdit <destination>/dist/main.1.sha.js replacing webpack functions (start of file) with the base64 versions generated earlier.\n Repack the asar using:\n\tnpx asar pack <destination> app.asar\nMove the files back using:\n\t sudo mv app.asar /usr/lib/slack/resources/"
}

usage="$0 [--home] || [--systemd] || [--touchpad] || [--packages] || [--fonts] || [--wifi]"

if [ "$#" -ne 1 ]; then echo "$usage"; exit 1; fi

case "$1" in
  "--home")
    home_setup
    ;;
  "--systemd")
    systemd_setup
    ;;
  "--touchpad")
    touchpad_setup
    ;;
  "--config")
    config_setup
    ;;
  "--packages")
    packages_setup
    ;;
  "--fonts")
    font_setup
    ;;
  "--wifi")
    wifi_setup
    ;;
  *)
    echo "$usage"
    exit 1
    ;;
esac
